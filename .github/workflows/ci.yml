name: Build and Deploy Java App

on:
  push:
    branches:
      - main

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: my-app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Determine next semantic version
        id: get_version
        run: |
          git fetch --tags
          latest=$(git tag --sort=-v:refname | head -n 1)
          if [[ -z "$latest" ]]; then
            version="1.0.0"
          else
            version="${latest#v}"
            IFS='.' read -r major minor patch <<< "$version"

            # Determine bump type from commit message
            msg=$(git log -1 --pretty=%B)
            if [[ "$msg" == *":maj:"* ]]; then
              major=$((major + 1))
              minor=0
              patch=0
            elif [[ "$msg" == *":min:"* ]]; then
              minor=$((minor + 1))
              patch=0
            else
              patch=$((patch + 1))
            fi

            version="$major.$minor.$patch"
          fi

          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Set version as environment variable
        run: echo "VERSION=${{ steps.get_version.outputs.version }}" >> $GITHUB_ENV

      - name: Tag and push new version
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag "v${VERSION}"
          git push origin "v${VERSION}"

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }} .

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}

      - name: Deploy (local Docker run)
        run: |
          docker run -d -p 8080:8080 --name my-app-container ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}